name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: read

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    environment:
      name: production

    steps:
      - name: Resolve IMAGE_TAG
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "image_tag=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region:     ${{ vars.AWS_REGION }}

      - name: Deploy via SSM
        env:
          INSTANCE_ID: ${{ vars.INSTANCE_ID }}
          APP_DIR:     ${{ vars.APP_DIR }}
          IMAGE_NAME:  ${{ env.IMAGE_NAME }}
          IMAGE_TAG:   ${{ steps.tag.outputs.image_tag }}
          SPRING_PROFILES_ACTIVE: ${{ vars.SPRING_PROFILES_ACTIVE }}
          TELEGRAM_BOT_TOKEN:     ${{ secrets.TELEGRAM_BOT_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -eo pipefail
          
          SCRIPT=$(cat <<'EOS'
          set -euo pipefail
          
          mkdir -p "$APP_DIR"
          cd "$APP_DIR"
          
          curl -fsSL -o compose.yml "https://raw.githubusercontent.com/${REPOSITORY}/v${IMAGE_TAG}/compose.yml" || \
          curl -fsSL -o compose.yml "https://raw.githubusercontent.com/${REPOSITORY}/main/compose.yml"
          
          curl -fsSL -o prometheus.yml "https://raw.githubusercontent.com/${REPOSITORY}/v${IMAGE_TAG}/prometheus.yml" || \
          curl -fsSL -o prometheus.yml "https://raw.githubusercontent.com/${REPOSITORY}/main/prometheus.yml"
          
          docker compose pull
          docker compose up -d --remove-orphans
          
          ok=0
          for i in $(seq 1 24); do
            CID="$(docker compose ps -q app 2>/dev/null || true)"
            STATUS="unknown"
            if [ -n "${CID:-}" ]; then
              STATUS="$(docker inspect --format '{{.State.Health.Status}}' "$CID" 2>/dev/null || echo unknown)"
            fi
            echo "app health=$STATUS"
            if [ "$STATUS" = "healthy" ]; then ok=1; break; fi
            sleep 5
          done
          
          if [ "$ok" -ne 1 ]; then
            echo "!! unhealthy after update"
            docker compose logs --no-color --since=10m app || true
            exit 1
          fi
          
          docker image prune -f || true
          EOS
          )
          
          SCRIPT_JSON=$(printf '%s' "$SCRIPT" | jq -Rs .)
          
          PARAMS_JSON=$(jq -n \
          --arg img "$IMAGE_NAME" \
          --arg tag "$IMAGE_TAG" \
          --arg repo "$REPOSITORY" \
          --arg tok "$TELEGRAM_BOT_TOKEN" \
          --arg prof "$SPRING_PROFILES_ACTIVE" \
          --arg dir "$APP_DIR" \
          --arg s "$SCRIPT_JSON" \
          '{
                commands: [
                  "#!/bin/bash",
                  "set -euo pipefail",
                  ("export IMAGE_NAME=\"" + $img + "\""),
                  ("export IMAGE_TAG=\"" + $tag + "\""),
                  ("export REPOSITORY=\"" + $repo + "\""),
                  ("export TELEGRAM_BOT_TOKEN=\"" + $tok + "\""),
                  ("export SPRING_PROFILES_ACTIVE=\"" + $prof + "\""),
                  ("export APP_DIR=\"" + $dir + "\""),
                  ("bash -lc " + $s)
                ],
                executionTimeout: ["3600"]
              }')
          
          COMMAND_ID=$(aws ssm send-command \
          --cli-binary-format raw-in-base64-out \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy downloader-bot ${IMAGE_NAME}:${IMAGE_TAG}" \
          --parameters "$PARAMS_JSON" \
          --query "Command.CommandId" \
          --output text)
        
          echo "SSM CommandId: $COMMAND_ID"
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID"
          
          RES_JSON=$(aws ssm list-command-invocations --command-id "$COMMAND_ID" --details --output json)
          STATUS=$(echo "$RES_JSON" | jq -r '.CommandInvocations[0].Status')
          EXIT_CODE=$(echo "$RES_JSON" | jq -r '.CommandInvocations[0].CommandPlugins[0].ResponseCode')
          OUT=$(echo "$RES_JSON" | jq -r '.CommandInvocations[0].CommandPlugins[0].Output // ""')
          ERRURL=$(echo "$RES_JSON" | jq -r '.CommandInvocations[0].CommandPlugins[0].StandardErrorUrl // empty')
        
          echo "SSM Status: $STATUS"
          echo "ExitCode: ${EXIT_CODE:-unknown}"
          echo "----- STDOUT -----"
          echo "$OUT"
          [ -n "$ERRURL" ] && echo "STDERR URL: $ERRURL"
          
          if [ "$STATUS" != "Success" ] || [ "${EXIT_CODE:-0}" -ne 0 ]; then
            echo "Deployment failed via SSM"
            exit 1
          fi
